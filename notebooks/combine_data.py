#%% [markdown]
# # Combine and Clean Data
# This is just a notebook file I can use to merge data generated by seperate
# scripts into fewer data files. I have to do this fairly often so it makes
# sense to keep the code somewhere I think
# %%
import pandas as pd
from glob import glob
#%% [markdown]
# ## $I_{\pm}$ for $k=5$ one dimensional CAs
# each row is outputed in parallel so they have to be combined to be useful
# %%
dfs = []
for file in glob('../data/k5/pid/*_ipm.csv'):
    rule = int(file.split('/')[-1].split('_')[0])
    print('Adding rule ', rule)
    df_row = pd.read_csv(file, index_col = 0)
    df_row['rule'] = rule
    dfs.append(df_row)

print('Merging dfs')
big_ipm_df = pd.concat(dfs)
big_ipm_df.to_csv('../data/k5/pid/ipm_ugly.csv', index=None)
# %% [markdown]
# ### change column names
# the atom names that come out of `dit` are very ugly. lets change them with
# this function I wrote.
# %%
import re

def pretty_labels_map(atom_labels):
    """
    transforms all of these crazy tuples into the notation used in williams and
    beer I_min PID
    """
    rename_map = {}
    for label in atom_labels:
        new_label = str(label)

        # eliminate commas and spaces
        new_label = new_label.replace(',', '')
        new_label = new_label.replace(' ', '')

        # replace braces
        new_label = new_label.replace('(', '{')
        new_label = new_label.replace(')', '}')

        # separate digits with colons
        while re.search(r'\d\d', new_label):
            new_label = re.sub(r'(\d)(\d)', r'\1:\2', new_label)

        # put them in a map
        rename_map[label] = new_label[1:-1]
    
    return rename_map
# %%

ipm_df = pd.read_csv('../data/k5/pid/ipm_ugly.csv')

lab_map = pretty_labels_map(ipm_df.columns)
lab_map['rule'] = 'rule'

ipm_df = ipm_df.rename(columns = lab_map)
ipm_df.to_csv('../data/k5/pid/ipm.csv')
# %% [markdown]
# ## Canalization calculations
# 
# I have the canalization stuff in files for each lambda value. Thats fine but
# I really need to combine them into one data frame to compare stuff more easily

#%%
dfs = []
for file in glob('../data/k5/stats/k5_cana_lambda*.csv'):
    l_val = file.split('/')[-1].split('_')[-1].split('.')[0]
    print('Loading lambda =', l_val)
    df_chunk = pd.read_csv(file, index_col = 0)
    df_chunk['lambda'] = l_val

    dfs.append(df_chunk)
   
print('Merging')
df_cana = pd.concat(dfs)
df_cana.to_csv('../data/k5/stats/k5_cana.csv')
# %% [markdown]
# ## $I_{min}$ for $k=5$ for one-dimensional CA
#
# This is basically the same proceedure as before. we need to get all of the
# single rows into one df and rename the columns
# %%
dfs = []
for file in glob('../data/k5/pid/*_imin.csv'):
    rule = int(file.split('/')[-1].split('_')[0])
    print('Adding rule ', rule)
    df_row = pd.read_csv(file, index_col = 0)
    df_row['rule'] = rule
    dfs.append(df_row)

print('Merging dfs')
big_ipm_df = pd.concat(dfs)
big_ipm_df.to_csv('../data/k5/pid/imin_ugly.csv', index=None)

#%%
imin_df = pd.read_csv('../data/k5/pid/imin_ugly.csv')

lab_map = pretty_labels_map(imin_df.columns)
lab_map['rule'] = 'rule'

imin_df = imin_df.rename(columns = lab_map)
imin_df.to_csv('../data/k5/pid/imin.csv')
# %%
